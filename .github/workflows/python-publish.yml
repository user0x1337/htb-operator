name: Update Version, Upload Python Package and Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      # Check out repository
      - name: Check out code
        uses: actions/checkout@v3

      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      
      - name: Install dependencies
        run: |
          pip install toml

      
      - name: Update version in pyproject.toml and setup.py
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          VERSION=${TAG_NAME#v}
          echo "Updating version to $VERSION"
          python update_version.py $VERSION

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }} 
          release_name: Release ${{ github.ref_name }}  
          body: |
            This release was automatically created by GitHub Actions.
            - Version: ${{ github.ref_name }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Find files to upload
        id: find_files
        run: echo "files=$(ls ./dist | tr '\n' ',')" >> $GITHUB_ENV

      - name: Upload Release Asset
          id: upload-release-asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
            asset_path: ./dist/${{ file }}
            asset_name: ${{ file }}
            asset_content_type: application/zip

   #   - name: Build and Upload package
   #     env:
   #       TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
   #       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
   #     run: |
   #       pip install build twine
   #       python -m build
   #       twine upload dist/*
